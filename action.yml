name: "Dynamic fuck-u-code Badge connected with GitHub Artifact"
description: "Perform fuck-u-code check upon your code and update badge to GitHub artifact. See https://github.com/Done-0/fuck-u-code"
branding:
  icon: activity
  color: green
inputs:
  target-path:
    description: "The path, relative to the root of the repo, of source code to scan"
    required: true
  fuck-u-code-args:
    description: "Additional arguments to pass to fuck-u-code, e.g. `--exclude \"xxx\"`, `\"--top xx\"`"
    required: false
    default: ''
  reverse-score:
    description: "Reverse the score, i.e. a score of 100 is good and a score of 0 is bad"
    required: false
    default: 'false'
  badge-text:
    description: "Text to display in the badge. Please use double dashes to replace single dashes, e.g. `fuck--u--codet` to represent `fuck-u-code`"
    default: fuck--u--code
    required: false
  color-bad-score:
    description: "Color of the badge for fuck-u-code scores < 60. Hex, rgb, rgba, hsl, hsla and css named colors can all be used"
    default: red
    required: false
  color-ok-score:
    description: "Color of the badge for fuck-u-code scores in range [60,90). Hex, rgb, rgba, hsl, hsla and css named colors can all be used"
    default: orange
    required: false
  color-good-score:
    description: "Color of the badge for fuck-u-code scores in range [90,100). Hex, rgb, rgba, hsl, hsla and css named colors can all be used"
    default: yellow
    required: false
  color-perfect-score:
    description: "Color of the badge for fuck-u-code scores == 100. Hex, rgb, rgba, hsl, hsla and css named colors can all be used"
    default: brightgreen
    required: false
  badge-artifact-name:
    description: "The name of the artifact name for the badge file to upload."
    default: upload-my-awesome-badge
  badge-file-name:
    description: "The name of the badge file."
    default: badge
  
  badge-logo-id:
    description: "The ID of the logo to use for the badge from https://simpleicons.org/"
    required: true
    default: go

  CLOUDFLARE_API_TOKEN:
    description: "Cloudflare API token"
    required: true
  R2_BUCKET:
    description: "R2 bucket name"
    required: true
  R2_badge_path:
    description: "Path to the badge file in R2 bucket"
    default: my-awesome-badges/example/
  

runs:
  using: "composite"

  steps:
    -
      name: Check branch id for analysis
      id: branch-check
      run: |
        target_branch=${{ (github.event_name == 'pull_request') && github.event.pull_request.head.ref || github.ref }}
        echo target_branch=$target_branch
        echo target_branch=$target_branch >> $GITHUB_OUTPUT
      shell: bash
    -
      name: "Checkout Repository"
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.branch-check.outputs.target_branch }}
    
    -
      name: "Install fuck-u-code"
      run: |
        # install the fuck-u-code from source
        go install github.com/Done-0/fuck-u-code/cmd/fuck-u-code@latest
      shell: bash
    -
      name: "Scan package(s)"
      run: |
        # add go bin path to path
        export PATH="$PATH:$(go env GOPATH)/bin"

        # echo to std
        fuck-u-code analyze --verbose ${{ inputs.fuck-u-code-args }} ${{ inputs.target-path }}
        # save as a text
        fuck-u-code analyze --verbose ${{ inputs.fuck-u-code-args }} ${{ inputs.target-path }} > fuck-u-code_score.txt
        
      shell: bash
    -
      name: "Get numeric fuck-u-code score and badge color"
      id: parameters-badge
      run: |
        # check if en-US is specified in the args
        if [[ "$(echo ${{ inputs.fuck-u-code-args || 'never mind'}} |grep 'en-US')" != "" ]];then
          # if yes, grep it under en-US
          fuck_u_code_score_w_delta=$(grep 'Overall Score:' fuck-u-code_score.txt |cut -b 18- | sed 's/ \/ 100 -.*//g')
        else
          # if no, grep it under zh-CN
          fuck_u_code_score_w_delta=$(grep '总体评分:' fuck-u-code_score.txt |cut -b 17- | sed 's/ \/ 100 -.*//g')
        fi
        # reversed score. the higher the better
        code_score_r=$(echo 100-$fuck_u_code_score_w_delta|bc)

        # check if requested to use reversed score
        if [[ "${{ inputs.reverse-score || 'never mind'}}" != 'true' ]];then
          # if not true, use original score 
          score_badge=$fuck_u_code_score_w_delta

          # classify the badge color according to the score
          badge_color=$(echo $score_badge | awk \
            -v perf=${{ inputs.color-perfect-score }} \
            -v good=${{ inputs.color-good-score }} \
            -v ok=${{ inputs.color-ok-score }} \
            -v bad=${{ inputs.color-bad-score }} \
              '{
                if($1>=40){print bad} else {
                  if($1>=10){print ok} else {
                    if($1>=0){print good} else {
                      print perf
                    }
                  }
                }
              }'
          )
          echo label_color=green >> $GITHUB_OUTPUT
        else
          # otherwise, use the reversed score
          score_badge=$code_score_r

          # classify the badge color according to the score
          badge_color=$(echo $score_badge | awk \
            -v perf=${{ inputs.color-perfect-score }} \
            -v good=${{ inputs.color-good-score }} \
            -v ok=${{ inputs.color-ok-score }} \
            -v bad=${{ inputs.color-bad-score }} \
              '{
                if($1==100){print perf} else {
                  if($1>=90){print good} else {
                    if($1>=60){print ok} else {
                      print bad
                    }
                  }
                }
              }'
          )
          echo label_color=purple >> $GITHUB_OUTPUT
        fi
        
        # set outputs
        echo badge_color=$badge_color >> $GITHUB_OUTPUT
        echo score_badge=$score_badge >> $GITHUB_OUTPUT

        # set vars
        echo badge_color=$badge_color
        echo score_badge=$score_badge
      shell: bash

    - 
      name: Expected Badge path and fetch 
      id: download-badge
      run: |
        # set logo, if set
        if [[ "${{ inputs.badge-logo-id }}" != "" ]];then
          logo_str="logo=${{ inputs.badge-logo-id }}&logoColor=white"
        else
          logo_str=""
        fi

        repo_link= ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}
        repo_link_url_encoded=$(echo $repo_link | sed 's/:/%3A/g' | sed 's/\//%2F/g')

        # check the link strings
        echo repo_link=$repo_link
        echo repo_link_url_encoded=$repo_link_url_encoded
        # compose the badge link
        # https://img.shields.io/badge/$(echo ${{ inputs.badge-text }} | sed 's/ /%20/g')-${{ steps.parameters-badge.outputs.score_badge }}-${{ steps.parameters-badge.outputs.badge_color }}?${logo_str}&labelColor=${{ steps.parameters-badge.outputs.label_color }}&link=https%3A%2F%2Fgithub.com%2FYaoYinYing%2Ffuck-u-code-github-action&link=${repo_link_url_encoded}

        svg_link="https://img.shields.io/badge/$(echo ${{ inputs.badge-text }} | sed 's/ /%20/g')-${{ steps.parameters-badge.outputs.score_badge }}-${{ steps.parameters-badge.outputs.badge_color }}?${logo_str}&labelColor=${{ steps.parameters-badge.outputs.label_color }}&link=https%3A%2F%2Fgithub.com%2FYaoYinYing%2Ffuck-u-code-github-action&link=${repo_link_url_encoded}"
        echo SVG link: $svg_link

        # create the badge path 
        badge_path="$(mktemp --suffix='oh-my-awesome-badge' -u)"
        mkdir -p  $badge_path

        # set as output
        echo "badge_path=$badge_path" >> $GITHUB_OUTPUT

        # download it as a svg file
        curl -s -o $badge_path/${{ inputs.badge-file-name }}.svg $svg_link

      shell: bash
    
    - name: Upload to artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.badge-artifact-name }}
        path: ${{ steps.download-badge.outputs.badge_path }}/${{ inputs.badge-file-name }}.svg
        if-no-files-found: error
        overwrite: true


    - name: Upload to R2
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        command: r2 object put  ${{ inputs.R2_BUCKET }}/${{ inputs.R2_badge_path }}/${{ inputs.badge-file-name }}.svg --file ${{ steps.download-badge.outputs.badge_path }}/${{ inputs.badge-file-name }}.svg --content-type image/svg+xml

    - name: Echo as markdown string
      shell: bash
      run: |
        # output the markdown string for set badge w/ convinience
        echo '--------------------- badge path --------------------
        echo "[![${{ inputs.badge-text }}](https://<link-to-r2-bucket>/${{ inputs.R2_badge_path }}/${{ inputs.badge-file-name }}.svg)](https://github.com/YaoYinYing/fuck-u-code-github-action)"
        echo '--------------------- badge path --------------------